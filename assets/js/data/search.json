[ { "title": "Predict rental car demand", "url": "/posts/analytics-vidhya-job-a-thon-april-2022/", "categories": "solution, code", "tags": "prediction, time series analysis, forcasting", "date": "2022-04-24 00:00:00 +0000", "snippet": "Problem Statement :ABC is a car rental company based out of Bangalore. It rents cars for both in and out stations at affordable prices. The users can rent different types of cars like Sedans, Hatchbacks, SUVs and MUVs, Minivans and so on.In recent times, the demand for cars is on the rise. As a result, the company would like to tackle the problem of supply and demand. The ultimate goal of the company is to strike the balance between the supply and demand inorder to meet the user expectations.The company has collected the details of each rental. Based on the past data, the company would like to forecast the demand of car rentals on an hourly basis.import pandas as pdfrom matplotlib import pyplottraining_data = pd.read_csv(&#39;/kaggle/input/jobathon-april-2022/train_E1GspfA.csv&#39;)training_data.shapeTraining dataset contains 18247 data points, each having 3 features. date hour demandData points are spread over 3 dimensionstraining_data.head()training_data.info()The training data has no null values, every data point has value for every featureThe date feature has object as its data type, which needs to be converted to DateTimetraining_data[&#39;date&#39;] = pd.to_datetime(training_data[&#39;date&#39;])Training data contains data point in the time range :print(f&quot;starting date : {str(training_data[&#39;date&#39;].dt.date.min())}&quot;)print(f&quot;end date : {str(training_data[&#39;date&#39;].dt.date.max())}&quot;)Instead of having hour as separate frature/column, date and hour can be combined to form a timestampdef dataPreprocessing(dataFrame): dataFrame[&#39;date&#39;] = pd.to_datetime(dataFrame[&#39;date&#39;]) + dataFrame[&#39;hour&#39;].astype(&#39;timedelta64[h]&#39;) dataFrame.drop(columns=[&#39;hour&#39;], axis=1, inplace=True) return dataFrameDropping the non required column : hourtraining_data = dataPreprocessing(training_data)training_data.head()Exploratory Data Analysisimport plotly.express as pxfig = px.line(training_data, x=&#39;date&#39;, y=&#39;demand&#39;)fig.update_xaxes(rangeslider_visible=True)fig.show()Splitting training data in tain and validation setfrom sklearn.model_selection import train_test_splitimport matplotlib.pyplot as plttraining_data.rename(columns={&#39;date&#39;: &#39;ds&#39;, &#39;demand&#39;: &#39;y&#39;}, inplace=True)train_data = training_data.sample(frac=0.8, random_state=10)validation_data = training_data.drop(train_data.index)print(f&#39;training data size : {train_data.shape}&#39;)print(f&#39;validation data size : {validation_data.shape}&#39;)train_data = train_data.reset_index()validation_data = validation_data.reset_index()Prediction Modelsimporting required librariesfrom sklearn.metrics import mean_absolute_errorfrom fbprophet import Prophetfitting the model on the training datamodel = Prophet()model.fit(train_data)Performing prediction on the validation datasetprediction = model.predict(pd.DataFrame({&#39;ds&#39;:validation_data[&#39;ds&#39;]}))y_actual = validation_data[&#39;y&#39;]y_predicted = prediction[&#39;yhat&#39;]y_predicted = y_predicted.astype(int)mean_absolute_error(y_actual, y_predicted)Plotting results of predictions on validation datasetimport plotly.graph_objects as gofrom plotly.subplots import make_subplotsfig = make_subplots(specs=[[{&quot;secondary_y&quot;: True}]])fig.add_trace( go.Scatter(x=validation_data[&#39;ds&#39;], y=y_actual, name=&quot;actual targets&quot;), secondary_y=False,)fig.add_trace( go.Scatter(x=validation_data[&#39;ds&#39;], y=y_predicted, name=&quot;predicted targets&quot;), secondary_y=True,)fig.update_layout( title_text=&quot;Actual vs Predicted Targets&quot;)fig.update_xaxes(title_text=&quot;Timeline&quot;)fig.update_yaxes(title_text=&quot;&amp;lt;b&amp;gt;actual&amp;lt;/b&amp;gt; targets&quot;, secondary_y=False)fig.update_yaxes(title_text=&quot;&amp;lt;b&amp;gt;predicted&amp;lt;/b&amp;gt; targets&quot;, secondary_y=True)fig.show()Predictions on test datasettest_data = pd.read_csv(&#39;/kaggle/input/jobathon-april-2022/test_6QvDdzb.csv&#39;)print(f&#39;test dataset size : {test_data.shape}&#39;)testing_data = dataPreprocessing(test_data.copy())testing_data.head()test_prediction = model.predict(pd.DataFrame({&#39;ds&#39;:testing_data[&#39;date&#39;]}))test_prediction = test_prediction[&#39;yhat&#39;]test_prediction = test_prediction.astype(int)test_data[&#39;demand&#39;] = test_predictiontest_data.head()# test_data.to_csv(&#39;./kaggle/output/submission.csv&#39;, index=False)Source code : Kaggle" }, { "title": "Predict Airplane Accident Severiety", "url": "/posts/predict-airplane-acciedent-severiety/", "categories": "solution, code", "tags": "classification", "date": "2020-08-08 03:33:00 +0000", "snippet": "This problem consists of building a machine learning model that could predict the severity of the airplance accident. The dataset consists of following features Accident_ID Accident_Type_Code Cabin_Temperature Turbulence_In_gforces Control_Metric Total_Safety_Complaints Days_Since_Inspection Safety_Score Violations SeverityHere, while building the model I have made use of the sklearn library and python programming language. I have tried following approaches: Decision Tree Random Forest Bagging Classifier XGBoostThe files contains the approaches that I’ve taken to solve the problem, which includes the data preprocessing, bulding the model. There were other techniques like feature elimination, feature correlation used, but are not mentioned in the files available.Source code : Predict Airplane Accident Severiety" }, { "title": "Running Stepper Motor On Raspberrypi", "url": "/posts/Running-Stepper-Motor-on-RaspberryPi/", "categories": "", "tags": "", "date": "2020-05-20 00:00:00 +0000", "snippet": "Embedded-System—Stepper-MotorThis is a simple experimentation with Raspberry Pi, which is used to control the execution of stepper motor and ultrasonic sensor.The project includes 3 python scripts. custom_motor.py : this script contains code implementation for activation and deactivation of stator magnetism at each step stepper_motor.py : this script contains actual stepper motor execting code, which asks the user to enter the specific angle with wich each step should be taken, and rotates the motor first in clockwise directioon with provided angle and then in reverse direction stepper_ultrasonic.py : this file is the integration of both stepper motor and ultrasonic sensor, which makes the system designed to work as a radar system Source code : Stepper_Motor - Raspberry_pi" } ]
